#!/usr/bin/env python3
# This file is placed in the Public Domain.


"objects"


import inspect
import os
import shutil
import sys
import threading
import time


sys.path.insert(0, os.getcwd())


from tob.clients import Client
from tob.command import command, parse, table
from tob.handler import Event
from tob.logging import level
from tob.package import Mods, modules, sums
from tob.persist import Workdir, moddir, skel
from tob.runtime import Config
from tob.threads import launch
from tob.utility import elapsed


from tobot import modules as MODS


CHECKSUM = "74c8e52fc1ef4d1f5dc90eae4f2200c4"


Config.name = "tobot"
Config.version = 4
Workdir.wdr = ".test"


events = []
examples = {
    "cmd": [""],
    "dis": [""],
    "dne": ["", "test2"],
    "dpl": ["hnrss title,url", ""],
    "flt": [""],
    "fnd": ["", "log", "rss", "config", "todo"],
    "log": ["", "test"],
    "man": [""],
    "mod": [""],
    "mre": [""],
    "nme": ["", "hnrss hackernews"],
    "now": [""],
    "pwd": ["", "bla mekker"],
    "req": [""],
    "res": ["", "hnrss"],
    "srv": [""],
    "tdo": ["", "test2", "test3"],
    "thr": [""],
    "upt": [""]
}


pre = {
    "cfg": ["", "nick=mekker"],
    "imp": ["", "tests/feeds.opml"],
    "log": ["", "bla"],
    "rss": ["","http://hnrss.org/newest"],
    "tdo": ["", "mekker"]
}


post = {
    "dne": ["", "hnrss"],
    "exp": [""],
    "rem": ["", "hnrss"]
}


class CLI(Client):

    def __init__(self):
        Client.__init__(self)
        self.register("command", command)

    def raw(self, txt):
        if "v" in Config.opts:
            print(txt)



class Pool:

    clients = []
    lock = threading.RLock()
    nrcpu = 1
    nrlast = 0

    @staticmethod
    def add(clt):
        "add client to pool."
        Pool.clients.append(clt)

    @staticmethod
    def init(clz, nr=None):
        "initialize client pool."
        Pool.nrcpu = nr or os.cpu_count()
        for _x in range(Pool.nrcpu):
            clt = clz()
            clt.start()
            Pool.add(clt)

    @staticmethod
    def put(evt):
        "dispatch to client."
        with Pool.lock:
            if Pool.nrlast >= Pool.nrcpu-1:
                Pool.nrlast = 0
            clt = Pool.clients[Pool.nrlast]
            clt.put(evt)
            Pool.nrlast += 1




def banner():
    tme = time.ctime(time.time()).replace("  ", " ")
    print("%s %s since %s (%s)" % (Config.name.upper(), Config.version, tme, Config.level.upper()))


def boot(doparse=True):
    Mods.add("modules", os.path.dirname(inspect.getfile(MODS)))
    Mods.add("mods", moddir())
    if doparse:
        parse(Config, " ".join(sys.argv[1:]))
        Config.level = Config.sets.level or Config.level
    Workdir.wdr = Workdir.wdr or os.path.expanduser(f"~/.{Config.name}")
    level(Config.level)
    if "a" in Config.opts:
        Config.sets.init = ",".join(modules())
    skel()
    table()
    sums(CHECKSUM)


def payload(todo):
    for cmd, example in todo.items():
        for ex in example:
            evt = Event()
            evt.txt = f"{cmd} {ex}"
            evt.type = "command"
            Pool.put(evt)
            events.append(evt)


def wrapped(func, clt):
    try:
        func(clt)
    except (KeyboardInterrupt, EOFError):
        pass


def wrap(func, clt):
    import termios
    old = None
    try:
        old = termios.tcgetattr(sys.stdin.fileno())
    except termios.error:
        pass
    try:
        wrapped(func, clt)
    finally:
        if old:
            termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, old)


def main(clt):
    Mods.add("modules", os.path.dirname(inspect.getfile(MODS)))
    Mods.add("mods", moddir())
    if os.path.exists(Workdir.wdr):
        shutil.rmtree(Workdir.wdr)
    boot()
    if "v" in Config.opts:
        banner()
    nr = Config.index or 1
    if "z" in Config.opts:
        Pool.init(CLI)
    else:
        Pool.init(CLI, 1)
    starttime = time.time()
    thrs = []
    for _x in range(nr):
        thrs.append(launch(payload, pre))
    for _x in range(nr):
        thrs.append(launch(payload, examples))
    for _x in range(nr):
        thrs.append(launch(payload, post))
    for thr in thrs:
        thr.join()
    gotcha = []
    for evt in events:
        evt.wait()
        gotcha.append(evt)
    nrevents = len(events)
    for evt in gotcha:
        events.remove(evt)
    endtime = time.time()
    lap = elapsed(endtime-starttime)
    percall = (endtime-starttime)/nrevents
    if "v" in Config.opts:
        print(f"{len(events)} events left.")
        print(f"total: {lap} nrs: {nr} call: %.6fs" % percall)
    sys.exit()


if __name__ == "__main__":
    wrap(main, CLI)
